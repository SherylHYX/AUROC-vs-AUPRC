{"cells":[{"metadata":{"_uuid":"3927cbaea6050df171281d6b5177dc2ecd590416","_cell_guid":"bf6b7923-a5a0-3e10-2913-161e6a94c458"},"cell_type":"markdown","source":"# Bayesian Logistic Regression with rstanarm \n\nAuthors: Jonah Gabry, Ben Goodrich and Aki Vehtari.\n\nThe introduction to Bayesian logistic regression and **rstanarm** is from a \n[CRAN vignette][1] by Jonah Gabry and Ben Goodrich. [CRAN vignette][1] was modified to this notebook by [Aki Vehtari][2]. *Instead of wells data in CRAN vignette, Pima Indians data is used.* The end of this notebook differs significantly from the CRAN vignette. You can read more about how to use **rstanarm** in [several vignettes at CRAN][3].\n\nAcknowledgements: Preprocessing of Pima Indian dataset is from a [noteebok][4] by [Lao Zhang][5]\n\n  [1]: https://cran.r-project.org/web/packages/rstanarm/vignettes/binomial.html\n  [2]: https://users.aalto.fi/~ave/\n  [3]: https://cran.r-project.org/web/packages/rstanarm/\n  [4]: https://www.kaggle.com/laozhang/d/uciml/pima-indians-diabetes-database/statistical-learning-with-r/run/445129\n  [5]: https://www.kaggle.com/laozhang\n\n---"},{"metadata":{"_uuid":"31ad42cb393faba6dbeb0385bdfbfbbb613609d4","_cell_guid":"4917f0a0-98f5-3f0c-5379-a8950a376122"},"cell_type":"markdown","source":"# Introduction\n\nThis vignette explains how to estimate generalized linear models (GLMs) for \nbinary (Bernoulli) and Binomial response variables using the `stan_glm`\nfunction in the __rstanarm__ package.\n\nThe four steps of a Bayesian analysis are\n\n1. Specify a joint distribution for the outcome(s) and all the unknowns, which\n  typically takes the form of a marginal prior distribution for the unknowns\n  multiplied by a likelihood for the outcome(s) conditional on the unknowns.\n  This joint distribution is proportional to a posterior distribution of the\n  unknowns conditional on the observed data\n2. Draw from posterior distribution using Markov Chain Monte Carlo (MCMC).\n3. Evaluate how well the model fits the data and possibly revise the model.\n4. Draw from the posterior predictive distribution of the outcome(s) given\n  interesting values of the predictors in order to visualize how a manipulation\n  of a predictor affects (a function of) the outcome(s).\n\nSteps 3 and 4 are covered in more depth by the vignette entitled [\"How to Use the\n__rstanarm__ Package\"][2]. This vignette focuses on Step 1 when the likelihood is\nthe product of conditionally independent binomial distributions (possibly with\nonly one trial per observation).\n\n# Likelihood\n\nFor a binomial GLM the likelihood for one observation $y$ can be written as a\nconditionally binomial PMF\n$$\\binom{n}{y} \\pi^{y} (1 - \\pi)^{n - y},$$\nwhere $n$ is the known number of trials, $\\pi = g^{-1}(\\eta)$ is the probability\nof success and $\\eta = \\alpha + \\mathbf{x}^\\top \\boldsymbol{\\beta}$ is a linear\npredictor. For a sample of size $N$, the likelihood of the entire sample is the\nproduct of $N$ individual likelihood contributions.\n\nBecause $\\pi$ is a probability, for a binomial model the _link_ function $g$\nmaps between the unit interval (the support of $\\pi$) and the set of all real\nnumbers $\\mathbb{R}$. When applied to a linear predictor $\\eta$ with values in\n$\\mathbb{R}$, the inverse link function $g^{-1}(\\eta)$ therefore returns a valid\nprobability between 0 and 1.\n\nThe two most common link functions used for binomial GLMs are the\n[logit](https://en.wikipedia.org/wiki/Logit) and \n[probit](https://en.wikipedia.org/wiki/Probit)\nfunctions. With the logit (or log-odds) link function $g(x) =\n\\ln{\\left(\\frac{x}{1-x}\\right)}$, the likelihood for a single observation\nbecomes\n\n$$\\binom{n}{y}\\left(\\text{logit}^{-1}(\\eta)\\right)^y \n\\left(1 - \\text{logit}^{-1}(\\eta)\\right)^{n-y} = \n\\binom{n}{y} \\left(\\frac{e^{\\eta}}{1 + e^{\\eta}}\\right)^{y}\n\\left(\\frac{1}{1 + e^{\\eta}}\\right)^{n - y}$$\n\nand the probit link function $g(x) = \\Phi^{-1}(x)$ yields the likelihood\n\n$$\\binom{n}{y} \\left(\\Phi(\\eta)\\right)^{y}\n\\left(1 - \\Phi(\\eta)\\right)^{n - y},$$\n\nwhere $\\Phi$ is the CDF of the standard normal distribution. The differences \nbetween the logit and probit functions are minor and -- if, as __rstanarm__ does\nby default, the probit is scaled so its slope at the origin matches the logit's \n-- the two link functions should yield similar results. With `stan_glm`, \nbinomial models with a logit link function can typically be fit slightly faster \nthan the identical model with a probit link because of how the two models are \nimplemented in Stan. Unless the user has a specific reason to prefer the probit\nlink, we recommend the logit simply because it will be slightly faster and more\nnumerically stable.\n\nIn theory, there are infinitely many possible link functions, although in\npractice only a few are typically used. Other common choices are the `cauchit`\nand `cloglog` functions, which can also be used with `stan_glm` (every link \nfunction compatible with`glm` will work with `stan_glm`).\n\nA full Bayesian analysis requires specifying prior distributions $f(\\alpha)$ and\n$f(\\boldsymbol{\\beta})$ for the intercept and vector of regression coefficients.\nWhen using `stan_glm`, these distributions can be set using the \n`prior_intercept` and `prior` arguments. The `stan_glm` function supports a\nvariety of prior distributions, which are explained in the __rstanarm__\ndocumentation (`help(priors, package = 'rstanarm')`).\n\nAs an example, suppose we have $K$ predictors and believe --- prior to seeing \nthe data --- that $\\alpha, \\beta_1, \\dots, \\beta_K$ are as likely to be positive\nas they are to be negative, but are highly unlikely to be far from zero. These\nbeliefs can be represented by normal distributions with mean zero and a small\nscale (standard deviation). To give $\\alpha$ and each of the $\\beta$s this prior\n(with a scale of 1, say), in the call to `stan_glm` we would include the\narguments `prior_intercept = normal(0,1)` and \n`prior = normal(0,1)`.\n\nIf, on the other hand, we have less a priori confidence that the parameters will\nbe close to zero then we could use a larger scale for the normal distribution \nand/or a distribution with heavier tails than the normal like the Student t \ndistribution. __Step 1__ in the \"How to Use the __rstanarm__ Package\" vignette \ndiscusses one such example.\n\n# Posterior\n\nWith independent prior distributions, the joint posterior distribution for\n$\\alpha$ and $\\boldsymbol{\\beta}$ is proportional to the product of the priors \nand the $N$ likelihood contributions:\n\n$$f\\left(\\alpha,\\boldsymbol{\\beta} | \\mathbf{y},\\mathbf{X}\\right) \\propto\n  f\\left(\\alpha\\right) \\times \\prod_{k=1}^K f\\left(\\beta_k\\right) \\times\n  \\prod_{i=1}^N {\n  g^{-1}\\left(\\eta_i\\right)^{y_i} \n  \\left(1 - g^{-1}\\left(\\eta_i\\right)\\right)^{n_i-y_i}}.$$\n  \nThis is posterior distribution that `stan_glm` will draw from when using MCMC.\n  \n# Logistic Regression Example\n\nWhen the logit link function is used the model is often referred to as a \nlogistic regression model (the inverse logit function is the CDF of the standard\nlogistic distribution). As an example, here we will show how to carry out a \nanalysis for Pima Indians data set similar to analysis from Chapter 5.4 of \n[Gelman and Hill (2007)](http://www.stat.columbia.edu/~gelman/arm/) \nusing `stan_glm`.\n\n[2]: https://cran.r-project.org/web/packages/rstanarm/vignettes/rstanarm.html"},{"metadata":{"_uuid":"41c5fc64c298aff4074c9a43314fa3f1dc78bdc3","trusted":true,"_cell_guid":"4c4e2470-6611-a082-2f79-ab22de28d7cb"},"cell_type":"code","source":"# file preview shows a header row\ndiabetes <- read.csv(\"../input/diabetes.csv\", header = TRUE)\n\n# first look at the data set using summary() and str() to understand what type of data are you working\n# with\nsummary(diabetes)\nstr(diabetes)","execution_count":1,"outputs":[]},{"metadata":{"_uuid":"93de53266ecd62feff5eb20f6f887d0d6f16b47c","trusted":true,"_cell_guid":"bc147ee9-e0f5-2e00-b5c6-26d0a2e5b749"},"cell_type":"code","source":"diabetes$Outcome <- factor(diabetes$Outcome)\n\n# removing those observation rows with 0 in any of the variables\nfor (i in 2:6) {\n      diabetes <- diabetes[-which(diabetes[, i] == 0), ]\n}\n# scale the covariates for easier comparison of coefficient posteriors\nfor (i in 1:8) {\n      diabetes[i] <- scale(diabetes[i])\n}\n\n# modify the data column names slightly for easier typing\nnames(diabetes)[7] <- \"dpf\"\nnames(diabetes) <- tolower(names(diabetes))\n\nn=dim(diabetes)[1]\np=dim(diabetes)[2]\nstr(diabetes)\nprint(paste0(\"number of observations = \", n))\nprint(paste0(\"number of predictors = \", m))","execution_count":2,"outputs":[]},{"metadata":{"_uuid":"e016bacebec9b5be1741ad37f7c0ea3a91e5a76f","trusted":true,"_cell_guid":"3fb6dd01-62d6-3033-889d-3cdd36214575"},"cell_type":"code","source":"# preparing the inputs\nx <- model.matrix(outcome ~ . - 1, data = diabetes)\ny <- diabetes$outcome","execution_count":3,"outputs":[]},{"metadata":{"_uuid":"84b445c37ca30569f9b6c96ac372ecb5590977a0","_cell_guid":"23aee1f9-e433-82c3-a302-d2d44aec33d1"},"cell_type":"markdown","source":"A Bayesian version of logistic regression model\ncan be estimated using the `stan_glm` function. Here we'll use a Student t \nprior with 7 degrees of freedom and a scale of 2.5, which, as discussed above,\nis a reasonable default prior when coefficients should be close to zero but \nhave some chance of being large. \n\nThe `formula`, `data` and `family` arguments to `stan_glm` are specified in\nexactly the same way as for `glm`. We've also added the `seed` \n(for reproducibility). You can read about other possible arguments in the\n`stan_glm` documentation (`help(stan_glm, package = 'rstanarm')`)."},{"metadata":{"_uuid":"bf0a6c59e16028f12d9844777b8acfda73aaaf57","trusted":true,"_cell_guid":"4e450676-5d53-f964-f2b5-4753f4d33c76"},"cell_type":"code","source":"library(rstanarm)\noptions(mc.cores = parallel::detectCores())\nt_prior <- student_t(df = 7, location = 0, scale = 2.5)\npost1 <- stan_glm(outcome ~ ., data = diabetes,\n                 family = binomial(link = \"logit\"), \n                 prior = t_prior, prior_intercept = t_prior, QR=TRUE,\n                 seed = 14124869)","execution_count":5,"outputs":[]},{"metadata":{"_uuid":"965ad3478869f65a91a2f597f9624803bd5cc5d8","_cell_guid":"8cd146fe-9745-f544-47e4-ced4ea3e70e0"},"cell_type":"markdown","source":"**stan_glm** returns the posterior distribution for the parameters describing the uncertainty related to unknown parameter values:"},{"metadata":{"_uuid":"8ff6d927e70bcda891c088f402c1bc71d7bf94de","trusted":true,"_cell_guid":"7517d708-659d-fd37-54d7-99ac3f0aeab9"},"cell_type":"code","source":"library(ggplot2)\npplot<-plot(post1, \"areas\", prob = 0.95, prob_outer = 1)\npplot+ geom_vline(xintercept = 0)","execution_count":6,"outputs":[]},{"metadata":{"_uuid":"cc49b758590e9a7d769fee9f787d835f34a5d51a","_cell_guid":"2a66a508-db04-78f9-cdcc-362ed2f23659"},"cell_type":"markdown","source":"We can extract corresponding posterior median estimates using 'coef' function and  to get a sense for the uncertainty in our estimates we can use the `posterior_interval` function to get Bayesian uncertainty intervals. The uncertainty intervals are computed by finding the relevant quantiles of the\ndraws from the posterior distribution. For example, to compute median and 90% intervals we\nuse:"},{"metadata":{"_uuid":"cf1e987b3b89c5cbd69de8475d0e83b8e8bcf85b","trusted":true,"_cell_guid":"c8b12c7a-1654-74c1-8081-03851d1ec4e4"},"cell_type":"code","source":"round(coef(post1), 2)\nround(posterior_interval(post1, prob = 0.9), 2)","execution_count":7,"outputs":[]},{"metadata":{"_uuid":"21c1a880924e9b02589e2deda2ca0fcb2abe64cc","_cell_guid":"09bf83ef-007d-e5e9-e747-16d19435f325"},"cell_type":"markdown","source":"For more on `posterior_interval` and interpreting the parameter estimates from a Bayesian\nmodel see Step 2 in the [\"How to Use the __rstanarm__ Package\"][1] vignette.\n\n[1]: https://cran.r-project.org/web/packages/rstanarm/vignettes/rstanarm.html"},{"metadata":{"_uuid":"e62a4e24ec2d9c94b4bb6248a5c8d3edfb2ce952","_cell_guid":"53dba6a9-08ec-81e0-32ba-2db9bca099ae"},"cell_type":"markdown","source":"__rstanarm__ supports __loo__ package which implements fast [Pareto smoothed leave-one-out cross-validation (PSIS-LOO)][1] to compute expected log predictive density (elpd):\n\n[1]: https://arxiv.org/abs/1507.04544"},{"metadata":{"_uuid":"aec34f3d3eb6bdaad0dd45e08d5bf0a18b0ce5c7","trusted":true,"_cell_guid":"b6e76ddf-8c00-5b16-1b40-7c447f904a0c"},"cell_type":"code","source":"library(loo)\n(loo1 <- loo(post1, save_psis = TRUE))","execution_count":9,"outputs":[]},{"metadata":{"_uuid":"b701377634e9b7b9c74ff8ef9d79e1d0024fda9d","_cell_guid":"53cf87d2-9aa9-b95d-af23-37f17d410050"},"cell_type":"markdown","source":"Above we see that PSIS-LOO result is reliable as all Pareto k estimates are small (k< 0.5)"},{"metadata":{"_uuid":"f8e6658bbf0c0651bed15ce697b522b1ef57b231"},"cell_type":"markdown","source":"# Comparison to a baseline model\n\nCompute baseline result without covariates."},{"metadata":{"trusted":true,"_uuid":"481e1d4eab9871890693ee1eb450259de73c55b5"},"cell_type":"code","source":"post0 <- update(post1, formula = outcome ~ 1, QR = FALSE)","execution_count":11,"outputs":[]},{"metadata":{"_uuid":"f0f201235e9774d965b4d893e2af9d53296374ce"},"cell_type":"markdown","source":"Compare to baseline"},{"metadata":{"trusted":true,"_uuid":"288669d920dbabec05129e6b12186a78e91eddd7"},"cell_type":"code","source":"(loo0 <- loo(post0))","execution_count":12,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"013bfe096f9d68afe7f930aaed7683d716f4c8d4"},"cell_type":"code","source":"rstanarm::compare_models(loo0,loo1)","execution_count":13,"outputs":[]},{"metadata":{"_uuid":"f236526dda60d7dbf2d25974a2a134d4c088d58e"},"cell_type":"markdown","source":"Covariates contain clearly useful information for predictions."},{"metadata":{"_uuid":"d88bc133420b0bdbcfeefe551e52a30f5f222b7e","_cell_guid":"16ec5d7b-1059-7f57-b782-3a6427d7a4d6"},"cell_type":"markdown","source":"# Other predictive performance measures\n\nFor more easily interpretable predictive performance measures, we next compute posterior predictive probabilities and use them to compute classification errors, ROC and AUC (some of these will be later included in loo package)."},{"metadata":{"_uuid":"572f153d602647fb5c84a33c90dd0a70e361a48b","trusted":true,"_cell_guid":"5ff2d429-97fe-4853-e562-fd1131ff01c4"},"cell_type":"code","source":"# Predicted probabilities\nlinpred <- posterior_linpred(post1)\npreds <- posterior_linpred(post1, transform=TRUE)\npred <- colMeans(preds)\npr <- as.integer(pred >= 0.5)\n   \n# confusion matrix\ncaret::confusionMatrix(as.factor(as.numeric(pr>0.5)), y)[2]\n# posterior classification accuracy\nround(mean(xor(pr,as.integer(y==0))),2)\n# posterior balanced classification accuracy\nround((mean(xor(pr[y==0]>0.5,as.integer(y[y==0])))+mean(xor(pr[y==1]<0.5,as.integer(y[y==1]))))/2,2)","execution_count":14,"outputs":[]},{"metadata":{"_uuid":"f8f7284d48d34841364e3072366c29c11f360c65","_cell_guid":"082eaa52-d494-8b2c-7030-fdb5606a9577"},"cell_type":"markdown","source":"The predictive performance above is overoptimistic. To better estimate the predictive performance for new not yet seen data we next use leave-one-out cross-validation:"},{"metadata":{"_uuid":"163d8ac78e972f26f650d945e5e69b5fb8fef5f7","trusted":true,"_cell_guid":"cf0904d4-0ebd-6840-61c9-0b937195a42b"},"cell_type":"code","source":"# PSIS-LOO weights\nlog_lik=log_lik(post1, parameter_name = \"log_lik\")\npsis=psislw(-log_lik)\n#plot(psis$pareto_k)\n#plot(psis$lw_smooth[,1],linpred[,1])\n# LOO predictive probabilities\nploo=colSums(preds*exp(psis$lw_smooth))\n# LOO classification accuracy\nround(mean(xor(ploo>0.5,as.integer(y==0))),2)\n# LOO balanced classification accuracy\nround((mean(xor(ploo[y==0]>0.5,as.integer(y[y==0])))+mean(xor(ploo[y==1]<0.5,as.integer(y[y==1]))))/2,2)","execution_count":16,"outputs":[]},{"metadata":{"_uuid":"f464d8690ac1f33fb64a7eac35bb9dafb9669272","_cell_guid":"875a8a54-f1bc-e3ff-1945-b89d165639fa"},"cell_type":"markdown","source":"In this case it happens that all predicted classes are same as with posterior predictions. We can see the small difference in posterior predictive probabilities and LOO proabilities:"},{"metadata":{"_uuid":"28e4abc159321066ebc9f903dff7b32fff2493ff","trusted":true,"_cell_guid":"0975db11-fec0-4aaf-5cf8-0bffb2b04dd6"},"cell_type":"code","source":"plot(pred,ploo)","execution_count":17,"outputs":[]},{"metadata":{"_uuid":"daeb413a68e8f38c85be1fc584691603cfa2c79b","_cell_guid":"d1fc15f5-f0e5-d218-a17d-7c851e66c937"},"cell_type":"markdown","source":"# Calibration of predictions\n\nWe can also examine calibration of the posterior and LOO predictive probabilities compared to observed binned event rates. We sort the predicted probabilities in ascending order, bin the corresponding binary observations and plot the mean and uncertainty interval based on binomial distribution.\n"},{"metadata":{"_uuid":"59283139ef2febff447b8de2c2880817e84f431b","trusted":true,"_cell_guid":"16c505c7-82a6-2c38-324b-ab926a8fe8af"},"cell_type":"code","source":"calPlotData<-caret::calibration(y ~ pred + loopred, \n                         data = data.frame(pred=pred,loopred=ploo,y=y), \n                         cuts=10, class=\"1\")\nggplot(calPlotData, auto.key = list(columns = 2))","execution_count":18,"outputs":[]},{"metadata":{"_uuid":"49e76f5ccee7c2ab54bc4d4e319981e9e137cd42"},"cell_type":"markdown","source":"From the above calibration plot we see that the model is otherwise calibrated except that for the observations with highest 10% of the predicted probabilities there are less events than predicted.  \n\nThe above calibration plot is using independent bins for the observations. The following uses a spline fit for smoothing (with narrower uncertainties)."},{"metadata":{"trusted":true,"_uuid":"756bca7d644c0ec1861570b0cf88c1a0c856c2bf"},"cell_type":"code","source":"library(splines)\nlibrary(MASS)\nggplot(data = data.frame(pred=pred,loopred=ploo,y=as.numeric(y)-1), aes(x=loopred, y=y)) + \n    stat_smooth(method='glm', formula = y ~ ns(x, 5), fullrange=TRUE) + \n    geom_abline(linetype = 'dashed') + ylab(label = \"Observed\") + xlab(label = \"Predicted (LOO)\") + \n    geom_jitter(height=0.03, width=0) + scale_y_continuous(breaks=seq(0,1,by=0.1)) + xlim(c(0,1))","execution_count":20,"outputs":[]},{"metadata":{"_uuid":"4a3a128c13e1bafb63e75335cc7a7b0ee479825e","_cell_guid":"154a3263-5d7f-3015-63d2-77db1ff74962"},"cell_type":"markdown","source":"# Alternative horseshoe prior on weights. \n\nIn this example, with n&gt;&gt;p the difference is small, and thus we don't expect much difference with a different prior and horseshoe prior is usually more useful for n&lt;p. \n\nThe global scale parameter for horseshoe prior is chosen as recommended by Juho Piironen and Aki Vehtari (2017). On the Hyperprior Choice for the Global Shrinkage Parameter in the Horseshoe Prior. *Journal of Machine Learning Research: Workshop and Conference Proceedings (AISTATS 2017 Proceedings)*, accepted for publication. [arXiv preprint arXiv:1610.05559][1] .\n\n [1]: http://arxiv.org/abs/1610.05559"},{"metadata":{"_uuid":"ccaad59548dd2915969029a5f39991bbfefc5a9e","trusted":true,"_cell_guid":"14edb9cc-2470-be86-e308-532c1462029c"},"cell_type":"code","source":"p0 <- 2 # prior guess for the number of relevant variables\ntau0 <- p0/(p-p0) * 1/sqrt(n)\nhs_prior <- hs(df=1, global_df=1, global_scale=tau0)\nt_prior <- student_t(df = 7, location = 0, scale = 2.5)\npost2 <- stan_glm(outcome ~ ., data = diabetes,\n                 family = binomial(link = \"logit\"), \n                 prior = hs_prior, prior_intercept = t_prior,\n                 seed = 14124869, adapt_delta = 0.999)","execution_count":21,"outputs":[]},{"metadata":{"_uuid":"2ee333febf53ff417209d66dcd2c43ea1066895f","_cell_guid":"40ea9b73-0187-4683-2689-86179780f88e"},"cell_type":"markdown","source":"We see that the horseshoe prior has shrunk the posterior distribution of irrelevant features closer to zero, without affecting the posterior distribution of the relevant features."},{"metadata":{"_uuid":"af8e3179f809367de4878217de8046452e356fbf","trusted":true,"_cell_guid":"2ef1a602-a774-4500-196e-d66bc6c99a59"},"cell_type":"code","source":"pplot<-plot(post2, \"areas\", prob = 0.95, prob_outer = 1)\npplot + geom_vline(xintercept = 0)","execution_count":22,"outputs":[]},{"metadata":{"_uuid":"13e115cd2e6d5c72470b9949038a44e3625e68fe","trusted":true,"_cell_guid":"f2c5e3da-ecb7-fa25-9087-e22ca5df906e"},"cell_type":"code","source":"round(coef(post2), 2)\nround(posterior_interval(post2, prob = 0.9), 2)","execution_count":23,"outputs":[]},{"metadata":{"_uuid":"2d4a35ab1054ff4671baf9ffaa2ced11ee1c2a6f","_cell_guid":"eb07fe6d-2113-6ff9-66ed-8ba41fe41848"},"cell_type":"markdown","source":"We compute LOO also for the model with Horseshoe prior. Expected log predictive density is higher, but not significantly. This is not surprising as this is a easy data with n&gt;&gt;p."},{"metadata":{"_uuid":"99da2f09a402c796bffc4b0b11b97641821913ff","trusted":true,"_cell_guid":"57acf9b6-9299-182b-a256-01a294dcf888"},"cell_type":"code","source":"(loo2 <- loo(post2))","execution_count":24,"outputs":[]},{"metadata":{"_uuid":"b1c789a7c9dc088e173c6f0d5fce1740affee948","trusted":true,"_cell_guid":"f47eaff7-3505-504d-a169-506dec8faabc"},"cell_type":"code","source":"rstanarm::compare_models(loo1,loo2)","execution_count":25,"outputs":[]},{"metadata":{"_uuid":"bb0670477d236f41f461c94e908a741af11810e0"},"cell_type":"markdown","source":"Looking at the pairwise posteriors we can see that, for example, posteriors for age and pregnancies effects are correlating and thus we can't relay on infering variable relevance by looking at the marginal distributions.\n"},{"metadata":{"trusted":true,"_uuid":"1137c08e6f89adc5e708e80d59ccfc4cc00f3147"},"cell_type":"code","source":"library(bayesplot)\nmcmc_pairs(as.array(post2),pars = c(\"pregnancies\",\"age\"))","execution_count":32,"outputs":[]},{"metadata":{"_uuid":"bd72d64fa2a13a07b668c748f0458af7ae3820b0"},"cell_type":"markdown","source":"The notebook would continue with demonstration of variable selection, but Kaggle docker image is missing CRAN package `projpred`. See [the full notebook including the variable selection](https://rawgit.com/avehtari/modelselection_tutorial/master/diabetes.html)."}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"},"_change_revision":0,"_is_fork":false},"nbformat":4,"nbformat_minor":1}